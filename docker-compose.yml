services:
  # Service to generate configuration file from environment variables
  config-generator:
    image: alpine:latest
    volumes:
      - ./data:/app/data
    environment:
      - SERVER_IP=${SERVER_IP:-0.0.0.0}
      - SERVER_PORT=${SERVER_PORT:-8000}
      - SERVER_HTTP_PORT=${SERVER_HTTP_PORT:-8003}
      - SERVER_VISION_EXPLAIN=${SERVER_VISION_EXPLAIN:-http://xiaozhi-esp32-server-web:8002/mcp/vision/explain}
      - MANAGER_API_URL=${MANAGER_API_URL:-http://xiaozhi-esp32-server-web:8002/xiaozhi}
      - MANAGER_API_SECRET=${MANAGER_API_SECRET}
    command: |
      sh -c '
        mkdir -p /app/data
        cat > /app/data/.config.yaml << EOF
      server:
        ip: $${SERVER_IP}
        port: $${SERVER_PORT}
        http_port: $${SERVER_HTTP_PORT}
        vision_explain: $${SERVER_VISION_EXPLAIN}
        auth:
          enabled: $${AUTH_ENABLED:false}
          allowed_devices:
            - "$${ALLOWED_DEVICES:-CB:5B:2C:76:D5:90}"
          tokens:
            - token: "$${TOKEN}"
              name: "$${NAME}"
      manager-api:
        url: $${MANAGER_API_URL}
        secret: $${MANAGER_API_SECRET}
      EOF
        echo "Configuration file generated successfully"
        cat /app/data/.config.yaml
        echo "--------------------------------"
        chmod 644 /app/data/.config.yaml
      '
    restart: "no"

  # Server模块
  xiaozhi-esp32-server:
    build:
      context: .
      dockerfile: Dockerfile-server
    container_name: xiaozhi-esp32-server
    depends_on:
      config-generator:
        condition: service_completed_successfully
      xiaozhi-esp32-server-db:
        condition: service_healthy
      xiaozhi-esp32-server-redis:
        condition: service_healthy
      xiaozhi-esp32-server-web:
        condition: service_started
    restart: always
    networks:
      - default
    ports:
      # ws server
      - 8000
      # The port of the http service, used for visual analysis interface
      - 8003
    security_opt:
      - seccomp:unconfined
    environment:
      - TZ=Europe/Paris
      - SERVER_IP=${SERVER_IP:-0.0.0.0}
      - SERVER_PORT=${SERVER_PORT:-8000}
      - SERVER_HTTP_PORT=${SERVER_HTTP_PORT:-8003}
      - MANAGER_API_URL=${MANAGER_API_URL:-http://xiaozhi-esp32-server-web:8002/xiaozhi}
      - MANAGER_API_SECRET=${MANAGER_API_SECRET}
    volumes:
      # Configuration file directory
      - ./data:/opt/xiaozhi-esp32-server/data

  # manager-api和manager-web模块
  xiaozhi-esp32-server-web:
    build:
      context: .
      dockerfile: Dockerfile-web
    container_name: xiaozhi-esp32-server-web
    restart: always
    networks:
      - default
    depends_on:
      xiaozhi-esp32-server-db:
        condition: service_healthy
      xiaozhi-esp32-server-redis:
        condition: service_healthy
    ports:
      # 智控台
      - 8002
    environment:
      - TZ=Europe/Paris
      - SPRING_DATASOURCE_DRUID_URL=${SPRING_DATASOURCE_DRUID_URL:-jdbc:mysql://xiaozhi-esp32-server-db:3306/xiaozhi_esp32_server?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Europe/Paris&nullCatalogMeansCurrent=true&connectTimeout=30000&socketTimeout=30000&autoReconnect=true&failOverReadOnly=false&maxReconnects=10}
      - SPRING_DATASOURCE_DRUID_USERNAME=${MYSQL_ROOT_USERNAME:-root}
      - SPRING_DATASOURCE_DRUID_PASSWORD=${MYSQL_ROOT_PASSWORD:-123456}
      - SPRING_DATA_REDIS_HOST=${REDIS_HOST:-xiaozhi-esp32-server-redis}
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - SPRING_DATA_REDIS_PORT=${REDIS_PORT:-6379}
    volumes:
      # 配置文件目录
      - ./uploadfile:/uploadfile

  # 数据库模块
  xiaozhi-esp32-server-db:
    image: mysql:latest
    container_name: xiaozhi-esp32-server-db
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    networks:
      - default
    expose:
      - 3306
    volumes:
      - ./mysql/data:/var/lib/mysql
    environment:
      - TZ=Europe/Paris
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-123456}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-xiaozhi_esp32_server}
      - MYSQL_INITDB_ARGS="--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
  # redis模块
  xiaozhi-esp32-server-redis:
    image: redis
    expose:
      - 6379
    container_name: xiaozhi-esp32-server-redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - default
networks:
  default:
